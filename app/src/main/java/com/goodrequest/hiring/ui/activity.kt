package com.goodrequest.hiring.ui

import android.os.Bundle
import android.view.View.GONE
import android.view.View.VISIBLE
import androidx.activity.ComponentActivity
import androidx.lifecycle.*
import com.goodrequest.hiring.PokemonApi
import com.goodrequest.hiring.databinding.ActivityBinding
import com.goodrequest.hiring.ui.UiState.*
import com.google.android.material.snackbar.Snackbar

class PokemonActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val vm by viewModel { PokemonViewModel(it, PokemonApi) }

        ActivityBinding.inflate(layoutInflater).run {
            setContentView(root)
            refresh.setOnRefreshListener { vm.load() }
            retry.setOnClickListener { vm.retry() }

            val adapter = PokemonAdapter()
            items.adapter = adapter

            vm.uiState.observe(this@PokemonActivity) { uiState ->
                when (uiState) {
                    is InitialState -> {
                        if (uiState.isError) {
                            failure.visibility = VISIBLE
                            loading.visibility = GONE
                            refresh.visibility = GONE
                        } else {
                            failure.visibility = GONE
                            loading.visibility = VISIBLE
                            refresh.visibility = GONE
                        }
                    }

                    is MainState -> {
                        if (uiState.isError && refresh.isRefreshing) {
                            Snackbar.make(
                                root,
                                "Loading failed",
                                Snackbar.LENGTH_SHORT
                            ).show()
                        }

                        adapter.show(uiState.pokemons)
                        loading.visibility = GONE
                        failure.visibility = GONE
                        refresh.visibility = VISIBLE

                        refresh.post {
                            refresh.isRefreshing = false
                        }
                    }
                }
            }
        }
    }
}

/**
 * Helper function that enables us to directly call constructor of our ViewModel but also
 * provides access to SavedStateHandle.
 * Shit like this is usually generated by Hilt
 */
inline fun <reified VM: ViewModel> ComponentActivity.viewModel(crossinline create: (SavedStateHandle) -> VM) =
    ViewModelLazy(
        viewModelClass = VM::class,
        storeProducer = { viewModelStore },
        factoryProducer = {
            object: AbstractSavedStateViewModelFactory(this@viewModel, null) {
                @Suppress("UNCHECKED_CAST")
                override fun <T : ViewModel> create(key: String, modelClass: Class<T>, handle: SavedStateHandle): T =
                    create(handle) as T
            }
    })